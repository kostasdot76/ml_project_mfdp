services:
  app:
    build: ./app/
    env_file:
      - ./app/.env
    volumes:
      - app:/app
      - ./static:/app/static
      - ./.dvc:/app/.dvc:z
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - event-planner-network
    healthcheck:
      test: [ "CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
  web-proxy:
    image: nginx:1.25-alpine
    volumes:
      - ./nginx:/etc/nginx
      - ./static:/usr/share/nginx/html/static
    ports:
      - 80:80
      - 443:443
    depends_on:
      app:
        condition: service_healthy
    networks:
      - event-planner-network
  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: on-failure
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    # depends_on:
    #   - db
    networks:
      - event-planner-network
  db:
    image: postgres:16-alpine
    env_file:
      - ./app/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 2s
      timeout: 2s
      retries: 30
    networks:
      - event-planner-network

  ml-worker:
    build:
      context: ./app
      dockerfile: Dockerfile.worker
    env_file:
      - ./app/.env
    volumes:
      - app:/app
    depends_on:  
      rabbitmq:
        condition: service_healthy
      ollama:
        condition: service_healthy    
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import pika; connection = pika.BlockingConnection(pika.ConnectionParameters('rabbitmq')); connection.close()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s    
    networks:
      - event-planner-network
  ollama:
    image: ollama/ollama
    container_name: gemma-server
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    environment:
      - OLLAMA_MODELS=gemma3:1b        
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 180s
    networks:
      - event-planner-network
  ollama-init:
    image: ollama/ollama
    container_name: ollama-init
    depends_on:
      ollama:
        condition: service_healthy
    command: 
      - "run"
      - "gemma3:1b"      
    environment:
      OLLAMA_HOST: "http://ollama:11434"
    # entrypoint: /bin/sh -c "exec -it gemma-server ollama run gemma3:1b"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - event-planner-network      
    restart: "no"

volumes:
  postgres_data:
  rabbitmq_data:
  app:
    driver: local
    driver_opts:
      type: none
      device: ./app
      o: bind
  ollama_data:


networks:
  event-planner-network:
    name: event-planner-network
    driver: bridge
